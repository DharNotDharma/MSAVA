@page "/upload"
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using M_SAVA_Core.Models
@using System.IO
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@inject M_SAVA_WASM.Services.UploadService UploadService

<h3>Upload</h3>

<MudPaper Class="pa-6 mx-auto" Style="max-width:900px;">
    <MudGrid>
        <!-- Source chooser (MudFileUpload + URL input) -->
        @if (!sourceChosen)
        {
            <MudItem xs="12" sm="6" Class="d-flex flex-column align-center">
                <MudFileUpload T="IBrowserFile"
                               FilesChanged="OnMudFileSelected"
                               Accept="*/*"
                               MaxFiles="1"
                               Class="w-100">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   Class="pa-6 w-100">
                            Click or drop file here
                        </MudButton>
                    </ActivatorContent>

                    <SelectedTemplate Context="file">
                        <MudPaper Class="pa-2 mt-2" Elevation="0">
                            <MudText Typo="Typo.body2">@((file as IBrowserFile)?.Name)</MudText>
                        </MudPaper>
                    </SelectedTemplate>
                </MudFileUpload>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="urlInput"
                              Label="Or paste a file URL"
                              Placeholder="https://example.com/file.pdf"
                              Immediate="true"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Check"
                              OnAdornmentClick="ValidateUrl"
                              For="@(() => urlInput)" />
                <MudText Typo="Typo.caption" Class="mt-2">Paste a valid http(s) URL and press the check icon to use it as source.</MudText>
                @if (!string.IsNullOrEmpty(urlError))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-2">@urlError</MudAlert>
                }
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">
                    Source: <b>@(sourceIsFile ? "File" : "URL")</b>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="ChangeSource" Class="ml-4">Change source</MudButton>
                </MudAlert>
            </MudItem>
        }

        <!-- Metadata form for File -->
        @if (sourceIsFile && sourceChosen)
        {
            <MudItem xs="12">
                <EditForm Model="@formFileModel" OnValidSubmit="HandleFormFileUpload">
                    <DataAnnotationsValidator />
                    <MudPaper Class="pa-4 mx-auto" Style="max-width:600px;">
                        <MudTextField @bind-Value="formFileModel.FileName" Label="File Name" Required="true" />
                        <MudTextField @bind-Value="formFileModel.FileExtension" Label="File Extension" Required="true" />
                        <MudTextField @bind-Value="formFileModel.Description" Label="Description" />
                        <MudTextField Value="@(formFileModel.AccessGroupId == Guid.Empty ? string.Empty : formFileModel.AccessGroupId.ToString())"
                                      ValueChanged="@((string v) => { if (Guid.TryParse(v, out var g)) formFileModel.AccessGroupId = g; })"
                                      Label="Access Group (GUID)" />
                        <MudTextField @bind-Value="tagsInput" Label="Tags (comma separated)" />
                        <MudTextField @bind-Value="categoriesInput" Label="Categories (comma separated)" />
                        <MudCheckBox T="bool" @bind-Checked="formFileModel.PublicViewing" Label="Public Viewing" />
                        <MudCheckBox T="bool" @bind-Checked="formFileModel.PublicDownload" Label="Public Download" />

                        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mt-4" FullWidth="true">
                            Upload File
                        </MudButton>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <MudAlert Severity="Severity.Error" Class="mt-2">@errorMessage</MudAlert>
                        }
                        @if (success)
                        {
                            <MudAlert Severity="Severity.Success" Class="mt-2">File uploaded successfully!</MudAlert>
                        }
                    </MudPaper>
                </EditForm>
            </MudItem>
        }

        <!-- Metadata form for URL -->
        @if (sourceIsUrl && sourceChosen)
        {
            <MudItem xs="12">
                <EditForm Model="@urlModel" OnValidSubmit="HandleUrlUpload">
                    <DataAnnotationsValidator />
                    <MudPaper Class="pa-4 mx-auto" Style="max-width:600px;">
                        <MudTextField @bind-Value="urlModel.FileUrl" Label="File URL" Required="true" For="@(() => urlModel.FileUrl)" Disabled="true" />
                        <MudTextField @bind-Value="urlModel.FileName" Label="File Name" Required="true" />
                        <MudTextField @bind-Value="urlModel.FileExtension" Label="File Extension" Required="true" />
                        <MudTextField @bind-Value="urlModel.Description" Label="Description" />
                        <MudTextField Value="@(urlModel.AccessGroupId == Guid.Empty ? string.Empty : urlModel.AccessGroupId.ToString())"
                                      ValueChanged="@((string v) => { if (Guid.TryParse(v, out var g)) urlModel.AccessGroupId = g; })"
                                      Label="Access Group (GUID)" />
                        <MudTextField @bind-Value="tagsInput" Label="Tags (comma separated)" />
                        <MudTextField @bind-Value="categoriesInput" Label="Categories (comma separated)" />
                        <MudCheckBox T="bool" @bind-Checked="urlModel.PublicViewing" Label="Public Viewing" />
                        <MudCheckBox T="bool" @bind-Checked="urlModel.PublicDownload" Label="Public Download" />

                        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mt-4" FullWidth="true">
                            Upload from URL
                        </MudButton>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <MudAlert Severity="Severity.Error" Class="mt-2">@errorMessage</MudAlert>
                        }
                        @if (success)
                        {
                            <MudAlert Severity="Severity.Success" Class="mt-2">File uploaded successfully!</MudAlert>
                        }
                    </MudPaper>
                </EditForm>
            </MudItem>
        }
    </MudGrid>
</MudPaper>

@code {
    // UI state
    private bool sourceIsFile = false;
    private bool sourceIsUrl = false;
    private bool sourceChosen => sourceIsFile || sourceIsUrl;

    private string urlInput = string.Empty;
    private string urlError = string.Empty;
    private string droppedFileName = string.Empty;

    // file selected via MudFileUpload
    private IBrowserFile? selectedFile;

    // shared metadata inputs
    private string tagsInput = string.Empty;
    private string categoriesInput = string.Empty;
    private string errorMessage = string.Empty;
    private bool success = false;

    // Models (your DTOs) - required properties initialized
    private SaveFileFromFormFileDTO formFileModel = new()
    {
        FileName = string.Empty,
        FileExtension = string.Empty,
        AccessGroupId = Guid.Empty,
        Tags = new List<string>(),
        Categories = new List<string>(),
        Description = string.Empty,
        PublicViewing = false,
        PublicDownload = false
    };

    private SaveFileFromUrlDTO urlModel = new()
    {
        FileUrl = string.Empty,
        FileName = string.Empty,
        FileExtension = string.Empty,
        AccessGroupId = Guid.Empty,
        Tags = new List<string>(),
        Categories = new List<string>(),
        Description = string.Empty,
        PublicViewing = false,
        PublicDownload = false
    };

    // MudFileUpload callback (fires after user picks/drops a file)
    // For MudBlazor v7+ use ActivatorContent; FilesChanged will pass IBrowserFile when T=IBrowserFile.
    private Task OnMudFileSelected(IBrowserFile file)
    {
        selectedFile = file;
        droppedFileName = selectedFile?.Name ?? string.Empty;
        PrepareFileSourceFromSelectedFile();
        return Task.CompletedTask;
    }

    private void PrepareFileSourceFromSelectedFile()
    {
        if (selectedFile == null) return;

        sourceIsFile = true;
        sourceIsUrl = false;

        // Pre-fill file name and extension from IBrowserFile.Name
        var name = Path.GetFileNameWithoutExtension(selectedFile.Name);
        var ext = Path.GetExtension(selectedFile.Name).TrimStart('.');
        formFileModel.FileName = name;
        formFileModel.FileExtension = ext;

        // Reset shared fields
        tagsInput = string.Empty;
        categoriesInput = string.Empty;
        errorMessage = string.Empty;
        success = false;
    }

    private void ValidateUrl()
    {
        urlError = string.Empty;
        if (string.IsNullOrWhiteSpace(urlInput))
        {
            urlError = "Please enter a URL.";
            return;
        }

        if (!Uri.TryCreate(urlInput.Trim(), UriKind.Absolute, out var u) ||
            (u.Scheme != Uri.UriSchemeHttp && u.Scheme != Uri.UriSchemeHttps))
        {
            urlError = "Invalid URL. Please include http:// or https://";
            return;
        }

        // Good URL — set as source
        urlModel.FileUrl = u.ToString();
        // Try to extract filename + extension from url path
        var lastSegment = u.Segments.Length > 0 ? u.Segments.Last().Trim('/') : string.Empty;
        if (string.IsNullOrEmpty(lastSegment))
        {
            urlModel.FileName = string.Empty;
            urlModel.FileExtension = string.Empty;
        }
        else
        {
            urlModel.FileName = Path.GetFileNameWithoutExtension(lastSegment);
            urlModel.FileExtension = Path.GetExtension(lastSegment).TrimStart('.');
        }

        sourceIsUrl = true;
        sourceIsFile = false;
        urlError = string.Empty;
        tagsInput = string.Empty;
        categoriesInput = string.Empty;
        errorMessage = string.Empty;
        success = false;
    }

    private void ChangeSource()
    {
        // reset source selection so user can pick again
        sourceIsFile = false;
        sourceIsUrl = false;
        selectedFile = null;
        droppedFileName = string.Empty;
        urlInput = string.Empty;

        // reinitialize with required members set
        urlModel = new SaveFileFromUrlDTO()
        {
            FileUrl = string.Empty,
            FileName = string.Empty,
            FileExtension = string.Empty,
            AccessGroupId = Guid.Empty,
            Tags = new List<string>(),
            Categories = new List<string>(),
            Description = string.Empty,
            PublicViewing = false,
            PublicDownload = false
        };

        formFileModel = new SaveFileFromFormFileDTO()
        {
            FileName = string.Empty,
            FileExtension = string.Empty,
            AccessGroupId = Guid.Empty,
            Tags = new List<string>(),
            Categories = new List<string>(),
            Description = string.Empty,
            PublicViewing = false,
            PublicDownload = false
        };

        tagsInput = string.Empty;
        categoriesInput = string.Empty;
        errorMessage = string.Empty;
        success = false;
    }

    // Prepare common data helpers
    private void PrepareCommonData(SaveFileFromFormFileDTO model)
    {
        model.Tags = tagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
        model.Categories = categoriesInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
        errorMessage = string.Empty;
        success = false;
    }

    private void PrepareCommonData(SaveFileFromUrlDTO model)
    {
        model.Tags = tagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
        model.Categories = categoriesInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
        errorMessage = string.Empty;
        success = false;
    }

    // Submit handlers
    private async Task HandleFormFileUpload()
    {
        if (selectedFile == null)
        {
            errorMessage = "No file selected.";
            success = false;
            return;
        }

        PrepareCommonData(formFileModel);
        var result = await UploadService.UploadFileAsync(formFileModel, selectedFile);
        success = result.Success;
        errorMessage = result.ErrorMessage;
    }

    private async Task HandleUrlUpload()
    {
        PrepareCommonData(urlModel);
        var result = await UploadService.UploadUrlAsync(urlModel);
        success = result.Success;
        errorMessage = result.ErrorMessage;
    }
}